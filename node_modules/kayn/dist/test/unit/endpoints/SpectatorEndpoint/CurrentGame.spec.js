'use strict';

var _chai = require('chai');

var _TestUtils = require('../../../TestUtils');

var _TestUtils2 = _interopRequireDefault(_TestUtils);

var _CurrentGameEndpoint = require('../../../../lib/Endpoints/SpectatorEndpoint/CurrentGameEndpoint');

var _CurrentGameEndpoint2 = _interopRequireDefault(_CurrentGameEndpoint);

var _mocks = require('../../../mocks');

var _mocks2 = _interopRequireDefault(_mocks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var kaynInstance = _TestUtils2.default.kaynInstance,
    defaultConfig = _TestUtils2.default.defaultConfig;
var kayn = kaynInstance.kayn,
    REGIONS = kaynInstance.REGIONS,
    METHOD_TYPES = kaynInstance.METHOD_TYPES;


describe('CurrentGameEndpoint', function () {
  this.timeout(0);

  beforeEach(function () {
    this.CurrentGame = new _CurrentGameEndpoint2.default(defaultConfig);
  });

  describe('.by.summonerID', function () {
    it('should have the correct payload #1', function () {
      var Contractz = _mocks2.default.summoner.Contractz;

      var _CurrentGame$by$summo = this.CurrentGame.by.summonerID(Contractz.id),
          payload = _CurrentGame$by$summo.payload;

      (0, _chai.expect)(payload).to.deep.equal({
        method: 'GET',
        serviceName: 'spectator',
        endpoint: 'active-games/by-summoner/' + Contractz.id,
        query: [],
        region: ''
      });
    });
  });
});