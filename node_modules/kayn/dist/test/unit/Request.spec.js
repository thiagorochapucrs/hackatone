'use strict';

var _chai = require('chai');

var _Request = require('../../lib/RequestClient/Request');

var _Request2 = _interopRequireDefault(_Request);

var _TestUtils = require('../TestUtils');

var _TestUtils2 = _interopRequireDefault(_TestUtils);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultConfig = _TestUtils2.default.defaultConfig;


describe('Request', function () {
  it('should initialize correctly #1', function () {
    var request = new _Request2.default(defaultConfig, 'summoner', 'by-name/chaullenger', 'abc');
    var config = request.config,
        methodName = request.methodName,
        payload = request.payload;

    (0, _chai.expect)(config).to.deep.equal(defaultConfig);
    (0, _chai.expect)(methodName).to.deep.equal('abc');
    (0, _chai.expect)(payload).to.deep.equal({
      method: 'GET',
      serviceName: 'summoner',
      endpoint: 'by-name/chaullenger',
      query: [],
      region: ''
    });
  });

  it('should initialize correctly #2', function () {
    var request = new _Request2.default(defaultConfig, 'summoner', 'by-name/chaullenger', 'abc', 'POST');
    var config = request.config,
        methodName = request.methodName,
        payload = request.payload;

    (0, _chai.expect)(config).to.deep.equal(defaultConfig);
    (0, _chai.expect)(methodName).to.deep.equal('abc');
    (0, _chai.expect)(payload).to.deep.equal({
      method: 'POST',
      serviceName: 'summoner',
      endpoint: 'by-name/chaullenger',
      query: [],
      region: ''
    });
  });

  it('should add query parameters correctly', function () {
    var request = new _Request2.default(defaultConfig, 'summoner', 'by-name/chaullenger', 'abc');
    request.query({ key: 'value' });
    (0, _chai.expect)(request.payload.query).to.deep.equal([{ key: 'value' }]);

    // Ensure that query is appended, and does not
    // overwrite old query.
    request.query({ key2: 'value2' });
    (0, _chai.expect)(request.payload.query).to.deep.equal([{ key: 'value' }, { key2: 'value2' }]);
  });

  it('should throw if query is passed non-object', function () {
    var request = new _Request2.default(defaultConfig, 'summoner', 'by-name/chaullenger', 'abc');
    (0, _chai.expect)(function () {
      return request.query('notLikeThis');
    }).to.throw();
    (0, _chai.expect)(function () {
      return request.query(3);
    }).to.throw();
    (0, _chai.expect)(function () {
      return request.query(function () {
        return 'abc';
      });
    }).to.throw();
  });

  it('should set region correctly', function () {
    var request = new _Request2.default(defaultConfig, 'summoner', 'by-name/chaullenger', 'abc');
    request.region('na');
    (0, _chai.expect)(request.payload.region).to.equal('na');
  });

  it('should throw if region is set twice', function () {
    var request = new _Request2.default(defaultConfig, 'summoner', 'by-name/chaullenger', 'abc');
    request.region('na');
    (0, _chai.expect)(request.payload.region).to.equal('na');
    (0, _chai.expect)(function () {
      return request.region('kr');
    }).to.throw();
  });

  it('should throw on bad region', function () {
    var request = new _Request2.default(defaultConfig, 'summoner', 'by-name/chaullenger', 'abc');
    (0, _chai.expect)(function () {
      return request.region('abcdefgjijklmnopqrstuvwxyz');
    }).to.throw();
  });
});