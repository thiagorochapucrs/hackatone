'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var redis = require('redis');

var RedisCache = function () {
  function RedisCache(opts) {
    _classCallCheck(this, RedisCache);

    var options = Object.assign({
      host: '127.0.0.1',
      port: 6379,
      keyPrefix: 'kayn-'
    }, opts || {});

    this.client = redis.createClient(options.port, options.host);
    this.client.on('error', function (err) {
      console.log('Redis error:', err);
    });

    this.prefix = options.keyPrefix;
  }

  _createClass(RedisCache, [{
    key: 'get',
    value: function get(args, cb) {
      this.client.get(this.prefix + args.key, function (err, reply) {
        reply ? cb(err, reply) : cb(err);
        return;
      });
    }
  }, {
    key: 'set',
    value: function set(args, value) {
      this.client.setex(this.prefix + args.key, args.ttl, value);
    }
  }]);

  return RedisCache;
}();

exports.default = RedisCache;