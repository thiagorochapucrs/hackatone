'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _URLHelper = require('../Utils/URLHelper');

var _URLHelper2 = _interopRequireDefault(_URLHelper);

var _RegionHelper = require('../Utils/RegionHelper');

var _RegionHelper2 = _interopRequireDefault(_RegionHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

require('babel-polyfill');

function Request(config, serviceName, endpoint, methodName, httpMethodType, limiter) {
  this.payload = {
    method: httpMethodType || 'GET',
    serviceName: serviceName,
    endpoint: endpoint,
    query: [],
    region: ''
  };
  this.config = config;
  this.retriesLeft = this.config.requestOptions.numberOfRetriesBeforeAbort;
  this.methodName = methodName;
  this.limiter = limiter;
}

Request.prototype.region = function (region) {
  if (this.payload.region) throw new Error('Do not call Request.region twice.');
  if (!_RegionHelper2.default.isValidRegion(region)) throw new Error('Bad region value in Request.region');
  if (region) this.payload.region = region;
  return this;
};

Request.prototype.query = function (obj) {
  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== 'object') throw new Error('Request.query takes in an object');
  if (obj) this.payload.query.push(obj);
  return this;
};

Request.prototype.then = function then(resolve, reject) {
  var self = this;
  return new Promise(function (innerResolve, innerReject) {
    return self.callback(function (err, res) {
      return err ? innerReject(err) : innerResolve(res);
    });
  }).then(resolve, reject);
};

Request.prototype.catch = function (callback) {
  return undefined.then(null, callback);
};

Request.prototype.callback = function (cb) {
  if (!this.payload.region) {
    this.payload.region = this.config.region;
  }

  var _payload = this.payload,
      endpoint = _payload.endpoint,
      query = _payload.query,
      region = _payload.region,
      serviceName = _payload.serviceName;

  var url = _URLHelper2.default.getURLWithQuery(_RegionHelper2.default.asPlatformID(region), serviceName, endpoint, query);
  var token = this.config.key;


  this.execute(url, token, this.retriesLeft, cb);
};

Request.prototype.execute = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(url, token, retriesLeft, cb) {
    var _this = this;

    var _config, cacheOptions, debugOptions, requestOptions, fn;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _config = this.config, cacheOptions = _config.cacheOptions, debugOptions = _config.debugOptions, requestOptions = _config.requestOptions;

            fn = function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(err, data) {
                var debugURL, res, blob, statusCode;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        debugURL = url + (debugOptions.showKey ? _URLHelper2.default.getAPIKey(url, token) : '');
                        _context.prev = 1;

                        if (!data) {
                          _context.next = 7;
                          break;
                        }

                        if (debugOptions.isEnabled) {
                          console.log('CACHE HIT @', debugURL);
                        }
                        ok(data)(cb);
                        _context.next = 12;
                        break;

                      case 7:
                        _context.next = 9;
                        return _this.limiter.executing({ url: url, token: token });

                      case 9:
                        res = _context.sent;


                        if (debugOptions.isEnabled) {
                          console.log('200 @', debugURL);
                        }

                        try {
                          blob = JSON.parse(res);

                          cacheOptions && cacheOptions.cache && cacheOptions.cache.set({ key: url, ttl: cacheOptions.ttls[_this.methodName] }, blob);
                          ok(blob)(cb);
                        } catch (ex) {
                          console.log(ex);
                        }

                      case 12:
                        _context.next = 22;
                        break;

                      case 14:
                        _context.prev = 14;
                        _context.t0 = _context['catch'](1);
                        statusCode = _context.t0.statusCode;

                        if (debugOptions.isEnabled) {
                          console.log(statusCode, '@', debugURL);
                        }

                        if (!(requestOptions.shouldRetry && shouldRetry(statusCode))) {
                          _context.next = 21;
                          break;
                        }

                        if (!(retriesLeft > 0)) {
                          _context.next = 21;
                          break;
                        }

                        return _context.abrupt('return', setTimeout(function () {
                          return _this.execute(url, token, retriesLeft - 1, cb);
                        }, requestOptions.delayBeforeRetry));

                      case 21:
                        error(statusCode)(cb);

                      case 22:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _callee, _this, [[1, 14]]);
              }));

              return function fn(_x5, _x6) {
                return _ref2.apply(this, arguments);
              };
            }();

            if (cacheOptions.cache) {
              cacheOptions.cache.get({ key: url }, fn);
            } else {
              fn();
            }

          case 3:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function (_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

var shouldRetry = function shouldRetry(statusCode) {
  return statusCode === 500 || statusCode === 503;
};

var ok = function ok(blob) {
  return function (cb) {
    return cb(null, blob);
  };
};
var error = function error(statusCode) {
  return function (cb) {
    return cb(statusCode, null);
  };
};

exports.default = Request;