'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Endpoint2 = require('../Endpoint');

var _Endpoint3 = _interopRequireDefault(_Endpoint2);

var _Request = require('../RequestClient/Request');

var _Request2 = _interopRequireDefault(_Request);

var _methodNames = require('../Enums/method-names');

var _methodNames2 = _interopRequireDefault(_methodNames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ChampionMasteryEndpoint = function (_Endpoint) {
  _inherits(ChampionMasteryEndpoint, _Endpoint);

  function ChampionMasteryEndpoint(config, limiter) {
    _classCallCheck(this, ChampionMasteryEndpoint);

    var _this = _possibleConstructorReturn(this, (ChampionMasteryEndpoint.__proto__ || Object.getPrototypeOf(ChampionMasteryEndpoint)).call(this));

    _this.config = config;

    _this.get = _this.get.bind(_this);
    _this.list = _this.list.bind(_this);
    _this.totalScore = _this.totalScore.bind(_this);

    _this.serviceName = 'champion-mastery';

    _this.limiter = limiter;
    return _this;
  }

  /**
   * Get a champion mastery by player ID and champion ID. Returns a function that takes in a champion ID.
   * 
   * Implements /lol/champion-mastery/v3/champion-masteries/by-summoner/{summonerId}/by-champion/{championId}.
   *  
   * @param {number} summonerID - The ID of the summoner. 
   * @returns {ChampionMastery.get.inner} - The curried function.
   */


  _createClass(ChampionMasteryEndpoint, [{
    key: 'get',
    value: function get(summonerID) {
      var self = this;
      /**
       * @name ChampionMastery.get.inner
       */
      return function (championID) {
        return new _Request2.default(self.config, self.serviceName, 'champion-masteries/by-summoner/' + summonerID + '/by-champion/' + championID, _methodNames2.default.CHAMPION_MASTERY.GET_CHAMPION_MASTERY, 'GET', self.limiter);
      };
    }

    /**
     * Get all champion mastery entries sorted by number of champion points descending. 
     * 
     * Implements /lol/champion-mastery/v3/champion-masteries/by-summoner/{summonerId}.
     *  
     * @param {number} summonerID - The ID of the summoner. 
     */

  }, {
    key: 'list',
    value: function list(summonerID) {
      return new _Request2.default(this.config, this.serviceName, 'champion-masteries/by-summoner/' + summonerID, _methodNames2.default.CHAMPION_MASTERY.GET_ALL_CHAMPION_MASTERIES, 'GET', this.limiter);
    }

    /**
     * Get all champion mastery entries sorted by number of champion points descending. 
     * 
     * Implements /lol/champion-mastery/v3/scores/by-summoner/{summonerId}.
     *  
     * @param {number} summonerID - The ID of the summoner. 
     */

  }, {
    key: 'totalScore',
    value: function totalScore(summonerID) {
      return new _Request2.default(this.config, this.serviceName, 'scores/by-summoner/' + summonerID, _methodNames2.default.CHAMPION_MASTERY.GET_CHAMPION_MASTERY_SCORE, 'GET', this.limiter);
    }
  }]);

  return ChampionMasteryEndpoint;
}(_Endpoint3.default);

exports.default = ChampionMasteryEndpoint;