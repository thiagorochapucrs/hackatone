'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _StaticSuperclass2 = require('./StaticSuperclass');

var _StaticSuperclass3 = _interopRequireDefault(_StaticSuperclass2);

var _Request = require('../../RequestClient/Request');

var _Request2 = _interopRequireDefault(_Request);

var _methodNames = require('../../Enums/method-names');

var _methodNames2 = _interopRequireDefault(_methodNames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var StaticLanguageStringsEndpoint = function (_StaticSuperclass) {
  _inherits(StaticLanguageStringsEndpoint, _StaticSuperclass);

  function StaticLanguageStringsEndpoint(config, limiter) {
    _classCallCheck(this, StaticLanguageStringsEndpoint);

    var _this = _possibleConstructorReturn(this, (StaticLanguageStringsEndpoint.__proto__ || Object.getPrototypeOf(StaticLanguageStringsEndpoint)).call(this));

    _this.config = config;

    _this.list = _this.list.bind(_this);

    _this.resourceName = 'language-strings';

    _this.limiter = limiter;
    return _this;
  }

  /**
   * Retrieves language strings data.
   */


  _createClass(StaticLanguageStringsEndpoint, [{
    key: 'list',
    value: function list() {
      return new _Request2.default(this.config, this.serviceName, this.resourceName, _methodNames2.default.STATIC.GET_LANGUAGE_STRINGS, 'GET', this.limiter);
    }
  }]);

  return StaticLanguageStringsEndpoint;
}(_StaticSuperclass3.default);

exports.default = StaticLanguageStringsEndpoint;