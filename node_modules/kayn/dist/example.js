'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var recipes = require('./recipes');

var _require = require('./'),
    Kayn = _require.Kayn,
    REGIONS = _require.REGIONS,
    METHOD_NAMES = _require.METHOD_NAMES,
    BasicJSCache = _require.BasicJSCache,
    RedisCache = _require.RedisCache;

var kayn = Kayn()({
  region: 'na',
  debugOptions: {
    isEnabled: true,
    showKey: false
  },
  requestOptions: {
    shouldRetry: true,
    numberOfRetriesBeforeAbort: 3,
    delayBeforeRetry: 1000,
    burst: true
  },
  cacheOptions: {
    cache: null,
    ttls: {}
  }
});

var print = function print(val) {
  return console.log(val);
};
var printBoth = function printBoth(err, data) {
  return console.log(err, data);
};

var main = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            /*
            recipes.grabSpecificChampionScores(kayn);
            recipes.sortChallengerLeagueByNumberOfWins(kayn);
            recipes.grabMatchesByChampionsFromRankedMatchlist(kayn);
            recipes.grabCurrentGameInfoOfFeaturedGamesList(kayn);
            recipes.grabRunesAndMasteriesOfChallengerPlayers(kayn);
            */
            kayn.Summoner.by.name('imaqtpie').then(function (data) {
              kayn.ChampionMastery.list(data.id).then(function () {});
              kayn.ChampionMastery.totalScore(data.id).then(function () {});
              kayn.LeaguePositions.by.summonerID(data.id).then(function () {});
              kayn.Matchlist.by.accountID(data.accountId).query({ queue: [420, 440, 470], season: 9, endIndex: 1 }).then(function (data) {
                data.matches.forEach(function (match) {
                  kayn.Match.get(match.gameId).then(function () {});
                });
              });
              kayn.Matchlist.by.accountID(data.accountId).query({ endIndex: 5 }).then(function (data) {
                data.matches.forEach(function (match) {
                  kayn.Match.get(match.gameId).then(function () {});
                });
              });
            });

          case 1:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function main() {
    return _ref.apply(this, arguments);
  };
}();

main();