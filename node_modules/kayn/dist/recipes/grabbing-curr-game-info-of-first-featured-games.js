"use strict";

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Calls the featured games endpoint and then
// calls the current game endpoint on the first game's, first participant's id.

var main = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(kayn) {
    var _ref2, gameList, _ref3, id, currentGameInfo;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return kayn.FeaturedGames.list();

          case 2:
            _ref2 = _context.sent;
            gameList = _ref2.gameList;

            if (!(gameList.length > 0)) {
              _context.next = 13;
              break;
            }

            _context.next = 7;
            return kayn.Summoner.by.name(gameList[0].participants[0].summonerName);

          case 7:
            _ref3 = _context.sent;
            id = _ref3.id;
            _context.next = 11;
            return kayn.CurrentGame.by.summonerID(id);

          case 11:
            currentGameInfo = _context.sent;

            console.log(currentGameInfo);

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function main(_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = main;