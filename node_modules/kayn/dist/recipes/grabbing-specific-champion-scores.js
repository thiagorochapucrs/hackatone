'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// Grabs the champion mastery DTOs out of a set of champion ids from a specific player.

// Let's pretend that these IDs are the IDs of all the supports in the game.
var championIDs = [1, 2, 3, 4, 5, 6];
var printError = function printError(statusCode) {
  return console.warn(statusCode);
};

var main = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(kayn) {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            kayn.Summoner.by.name('Contractz').then(function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref3) {
                var id = _ref3.id;
                var getChampionFromContractz, mapFn, supportCMDTOs;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        // ChampionMastery.get takes in a summoner id
                        // and returns a function that takes in a champion id.
                        getChampionFromContractz = kayn.ChampionMastery.get(id);

                        mapFn = function () {
                          var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(championID) {
                            return regeneratorRuntime.wrap(function _callee$(_context) {
                              while (1) {
                                switch (_context.prev = _context.next) {
                                  case 0:
                                    _context.next = 2;
                                    return getChampionFromContractz(championID);

                                  case 2:
                                    return _context.abrupt('return', _context.sent);

                                  case 3:
                                  case 'end':
                                    return _context.stop();
                                }
                              }
                            }, _callee, undefined);
                          }));

                          return function mapFn(_x3) {
                            return _ref4.apply(this, arguments);
                          };
                        }();

                        _context2.next = 4;
                        return Promise.all(championIDs.map(mapFn));

                      case 4:
                        supportCMDTOs = _context2.sent;

                        console.log(supportCMDTOs);

                      case 6:
                      case 'end':
                        return _context2.stop();
                    }
                  }
                }, _callee2, undefined);
              }));

              return function (_x2) {
                return _ref2.apply(this, arguments);
              };
            }()).catch(printError);

          case 1:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function main(_x) {
    return _ref.apply(this, arguments);
  };
}();

module.exports = main;